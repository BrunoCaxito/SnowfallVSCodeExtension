{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Snowfall Script",
	"scopeName": "source.sf",

	"patterns": [
		{
			"include": "#metadata"
		},

		{
			"include": "#dialog"
		},
		{
			"include": "#label"
		},
		{
			"include": "#goto"
		},
		{
			"include": "#options"
		},
		{
			"include": "#command"
		},
		{
			"include": "#directive"
		},

		{
			"include": "#comment"
		},
		{
			"include": "#text"
		}
	],

	"repository": {
		"metadata": {
			"name": "metadata.sf",
			"match": "\\|.*",
			"captures": {
				"0": {
					"patterns": [
						{
							"patterns": [
								{
									"match": "(\\|)(.*?)(?=(\\||$))",
									"captures": {
										"1": {
											"name": "keyword.operator.concat.sf"
										},

										"2": {
											"patterns": [
												{
													"include": "#expression"
												},
												{
													"include": "#variable"
												},
												{
													"include": "#definition"
												}
											]
										}
									}
								}
							]
						}
					]
				}
			}
		},

		"expression" : {
			"name": "metadata.expression.sf",
			"match": "(\\#.[^\\s]*)|(->.[^\\s]*)|((.*?)(==|!=|>=|<=|(?<!-)>|<|=|\\+|-(?!>)|\\*|\/)(.*))|(\\w+.*)",
			"captures": {
				"1": {
					"name": "variable.other.constant.sf"
				},
				"2": {
					"name": "keyword.control.goto.text.sf"
				},
				"4": {
					"name": "lvalue.sf"
				},
				"5": {
					"name": "keyword.operator.sf"
				},
				"6": {
					"patterns": [
						{
							"include": "#richtext"
						},

						{
							"name": "constant.language.sf",
							"match": "(?<!\\w)(true|false|on|off|null)(?!\\w)"
						},

						{
							"name": "constant.numeric.sf",
							"match": "(?<!\\w)([\\d]+)(?!\\w)"
						},

						{
							"name": "string.sf",
							"match": "\\w+"
						},

						{
							"include": "#variable"
						},

						{
							"include": "#definition"
						}
					]
				},
				"7": {
					"patterns": [
						{
							"name": "entity.name.function.instruction.sf",
							"match": "\\w+"
						},

						{
							"name": "variable.parameter.sf",
							"match": "(\\s|\\\\)\\w+"
						}
					]
				}
			}
		},

		"variable": {
			"name": "variable.other.property.sf",
			"match": "{\\w+}"
		},

		"definition": {
			"name": "entity.name.other.preprocessor.macro.directive.text.sf",
			"match": "\\[\\[\\w+\\]\\]"
		},

		"richtext": {
			"name": "entity.name.tag.sf",
			"match": "<(\\w*).*?>"
		},

		"dialog": {
			"name": "entity.name.type.class.dialog.sf",
			"match": "^\\t*(\\-\\ )(.*?)(?=\\||$)(.*$)",
			"captures": {
				"1": {
					"name": "entity.name.type.class.dialog.sign.sf"
				},

				"2": {
					"name": "entity.name.type.class.dialog.text.sf",
					"patterns": [
						{
							"include": "#variable"
						},

						{
							"include": "#definition"
						}
					]
				},

				"3": {
					"name": "entity.name.type.class.dialog.metadata.sf",
					"patterns": [
						{
							"include": "#metadata"
						}
					]
				}
			}
		},

		"label": {
			"name": "entity.name.namespace.label.sf",
			"match": "^\\t*(@\\ )(.*?)(?=\\ \\||$)(.*$)",
			"captures": {
				"1": {
					"name": "entity.name.namespace.label.sign.sf"
				},

				"2": {
					"name": "entity.name.namespace.label.text.sf",
					"patterns": [
						{
							"include": "#variable"
						},

						{
							"include": "#definition"
						}
					]
				},

				"3": {
					"name": "entity.name.namespace.label.metadata.sf",
					"patterns": [
						{
							"include": "#metadata"
						}
					]
				}
			}
		},

		"goto": {
			"name": "keyword.control.goto.sf",
			"match": "^\\t*(\\->\\ )(.*?)(?=\\||$)(.*$)",
			"captures": {
				"1": {
					"name": "keyword.control.goto.sign.sf"
				},

				"2": {
					"name": "keyword.control.goto.text.sf",
					"patterns": [
						{
							"include": "#variable"
						},

						{
							"include": "#definition"
						}
					]
				},

				"3": {
					"name": "keyword.control.goto.metadata.sf",
					"patterns": [
						{
							"include": "#metadata"
						}
					]
				}
			}
		},

		"options": {
			"name": "entity.name.type.enum.option.sf",
			"match": "^\\t*(\\*\\ )(.*?)(?=\\||$)(.*$)",
			"captures": {
				"1": {
					"name": "entity.name.type.enum.option.sign.sf"
				},

				"2": {
					"name": "entity.name.type.enum.option.text.sf",
					"patterns": [
						{
							"include": "#richtext"
						},

						{
							"include": "#variable"
						},

						{
							"include": "#definition"
						}
					]
				},

				"3": {
					"name": "entity.name.type.enum.option.metadata.sf",
					"patterns": [
						{
							"include": "#metadata"
						}
					]
				}
			}
		},

		"command": {
			"name": "entity.name.function.command.sf",
			"match": "^\\t*(\\$\\ )(.*?)(?=\\||$)(.*$)",
			"captures": {
				"1": {
					"name": "entity.name.function.command.sign.sf"
				},

				"2": {
					"name": "entity.name.function.command.text.sf",
					"patterns": [
						{
							"include": "#expression"
						},

						{
							"include": "#variable"
						},

						{
							"include": "#definition"
						}
					]
				},

				"3": {
					"name": "entity.name.function.command.metadata.sf",
					"patterns": [
						{
							"include": "#metadata"
						}
					]
				}
			}
		},

		"directive": {
			"name": "entity.name.other.preprocessor.macro.directive.sf",
			"match": "^\\t*(\\~\\ )(\\w+)(.*$)",
			"captures": {
				"1": {
					"name": "entity.name.other.preprocessor.macro.directive.sign.sf"
				},

				"2": {
					"name": "entity.name.other.preprocessor.macro.directive.text.sf"
				},

				"3": {
					"name": "entity.name.other.preprocessor.macro.directive.param.sf"
				}
			}
		},

		"comment": {
			"patterns": [
				{
					"name": "comment.title.sf",
					"match": "(SCENE|ACT|CHAPTER)[ -Z]+"
				},

				{
					"name": "comment.header.sf",
					"match": "[0-9A-Z\\s\\.\\-\\'\\,]{12,}"
				},

				{
					"name": "comment.line.sf",
					"match": "^(?!(\\-|\\t|@|\\*|\\$))(.*)"
				},

				{
					"name": "comment.indented.sf",
					"match": "^\\t*(# )(.*?)(?=\\||$)(.*$)"
				}
			]
		},

		"text": {
			"name": "string.dialog.sf",
			"match": "^\\t.*",
			"captures": {
				"0": {
					"patterns": [
						{
							"include": "#richtext"
						},

						{
							"include": "#variable"
						},

						{
							"include": "#definition"
						}
					]
				}
			}
		}
	}
}
